package org.model;

// Generated 02-may-2014 11:48:28 by Hibernate Tools 4.0.0

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.DecimalMin;
import javax.validation.constraints.Digits;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlID;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;

import org.hibernate.annotations.NaturalId;
import org.hibernate.annotations.Type;
import org.hibernate.validator.constraints.NotBlank;
import org.hibernate.validator.constraints.NotEmpty;
import org.model.config.ConfigurationFactory;
import org.model.type.EstadoCuentaBancaria;
import org.model.type.TipoCuentaBancaria;

/**
 * CuentaBancaria generated by hbm2java
 */
@Entity
@Table(name = "CUENTA_BANCARIA", schema = "BDSISTEMAFINANCIERO")
@XmlRootElement(name = "cuentaBancaria")
@XmlAccessorType(XmlAccessType.PROPERTY)
@NamedQueries({ @NamedQuery(name = CuentaBancaria.findByNumeroCuenta, query = "SELECT c FROM CuentaBancaria c WHERE c.numeroCuenta = :numerocuenta") })
public class CuentaBancaria implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public final static String findByNumeroCuenta = "CuentaBancaria.findByNumeroCuenta";

	private Long idCuentaBancaria;
	private String numeroCuenta;
	private TipoCuentaBancaria tipoCuentaBancaria;
	private Date fechaApertura;
	private Date fechaCierre;
	private BigDecimal saldo;
	private int cantidadRetirantes;
	private EstadoCuentaBancaria estado;
	private Moneda moneda;
	private Socio socio;

	private Set cuentaBancariaTasas = new HashSet(0);
	private Set titulars = new HashSet(0);
	private Set transferenciaBancariasForIdCuentaBancariaOrigen = new HashSet(0);
	private Set transferenciaBancariasForIdCuentaBancariaDestino = new HashSet(0);
	private Set cuentaBancariaInteresGeneras = new HashSet(0);
	private Set beneficiarios = new HashSet(0);
	private Set transaccionBancarias = new HashSet(0);

	public CuentaBancaria() {
	}

	@XmlID
	@XmlElement(name = "id")
	@GeneratedValue
	@Id
	@Column(name = "ID_CUENTA_BANCARIA", unique = true, nullable = false)
	public Long getIdCuentaBancaria() {
		return this.idCuentaBancaria;
	}

	public void setIdCuentaBancaria(Long idCuentaBancaria) {
		this.idCuentaBancaria = idCuentaBancaria;
	}

	@XmlTransient
	@NotNull
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ID_SOCIO", foreignKey = @ForeignKey)
	public Socio getSocio() {
		return this.socio;
	}

	public void setSocio(Socio socio) {
		this.socio = socio;
	}

	@XmlElement
	@NotNull
	@Type(type = ConfigurationFactory.tipoCuentaBancariaType)
	@Column(name = "TIPO_CUENTA_BANCARIA", length = 10)
	public TipoCuentaBancaria getTipoCuentaBancaria() {
		return this.tipoCuentaBancaria;
	}

	public void setTipoCuentaBancaria(TipoCuentaBancaria tipoCuentaBancaria) {
		this.tipoCuentaBancaria = tipoCuentaBancaria;
	}

	@XmlElement
	@NotNull
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ID_MONEDA", foreignKey = @ForeignKey)
	public Moneda getMoneda() {
		return this.moneda;
	}

	public void setMoneda(Moneda moneda) {
		this.moneda = moneda;
	}

	@XmlElement
	@NotNull
	@NotBlank
	@NotEmpty
	@Size(min = 14, max = 14)
	@NaturalId
	@Column(name = "NUMERO_CUENTA")
	public String getNumeroCuenta() {
		return this.numeroCuenta;
	}

	public void setNumeroCuenta(String numeroCuenta) {
		this.numeroCuenta = numeroCuenta;
	}

	@XmlElement
	@NotNull
	@Temporal(TemporalType.DATE)
	@Column(name = "FECHA_APERTURA")
	public Date getFechaApertura() {
		return this.fechaApertura;
	}

	public void setFechaApertura(Date fechaApertura) {
		this.fechaApertura = fechaApertura;
	}

	@XmlElement
	@Temporal(TemporalType.DATE)
	@Column(name = "FECHA_CIERRE")
	public Date getFechaCierre() {
		return this.fechaCierre;
	}

	public void setFechaCierre(Date fechaCierre) {
		this.fechaCierre = fechaCierre;
	}

	@XmlElement
	@NotNull
	@DecimalMin(value = "0")
	@Digits(integer = 18, fraction = 2)
	@Column(name = "SALDO", nullable = false)
	public BigDecimal getSaldo() {
		return this.saldo;
	}

	public void setSaldo(BigDecimal saldo) {
		this.saldo = saldo;
	}

	@XmlElement
	@NotNull
	@Min(value = 1)
	@Max(value = 5)
	@Column(name = "CANTIDAD_RETIRANTES")
	public int getCantidadRetirantes() {
		return this.cantidadRetirantes;
	}

	public void setCantidadRetirantes(int cantidadRetirantes) {
		this.cantidadRetirantes = cantidadRetirantes;
	}

	@XmlElement
	@NotNull
	@Type(type = ConfigurationFactory.estadoCuentaBancariaType)
	@Column(name = "ESTADO", nullable = false, length = 12)
	public EstadoCuentaBancaria getEstado() {
		return this.estado;
	}

	public void setEstado(EstadoCuentaBancaria estado) {
		this.estado = estado;
	}

	@XmlTransient
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "cuentaBancaria")
	public Set<CuentaBancariaTasa> getCuentaBancariaTasas() {
		return this.cuentaBancariaTasas;
	}

	public void setCuentaBancariaTasas(Set cuentaBancariaTasas) {
		this.cuentaBancariaTasas = cuentaBancariaTasas;
	}

	@XmlTransient
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "cuentaBancaria")
	public Set<Titular> getTitulars() {
		return this.titulars;
	}

	public void setTitulars(Set titulars) {
		this.titulars = titulars;
	}

	@XmlTransient
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "cuentaBancariaOrigen")
	public Set<TransferenciaBancaria> getTransferenciaBancariasForIdCuentaBancariaOrigen() {
		return this.transferenciaBancariasForIdCuentaBancariaOrigen;
	}

	public void setTransferenciaBancariasForIdCuentaBancariaOrigen(Set transferenciaBancariasForIdCuentaBancariaOrigen) {
		this.transferenciaBancariasForIdCuentaBancariaOrigen = transferenciaBancariasForIdCuentaBancariaOrigen;
	}

	@XmlTransient
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "cuentaBancariaDestino")
	public Set<TransferenciaBancaria> getTransferenciaBancariasForIdCuentaBancariaDestino() {
		return this.transferenciaBancariasForIdCuentaBancariaDestino;
	}

	public void setTransferenciaBancariasForIdCuentaBancariaDestino(Set transferenciaBancariasForIdCuentaBancariaDestino) {
		this.transferenciaBancariasForIdCuentaBancariaDestino = transferenciaBancariasForIdCuentaBancariaDestino;
	}

	@XmlTransient
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "cuentaBancaria")
	public Set<CuentaBancariaInteresGenera> getCuentaBancariaInteresGeneras() {
		return this.cuentaBancariaInteresGeneras;
	}

	public void setCuentaBancariaInteresGeneras(Set cuentaBancariaInteresGeneras) {
		this.cuentaBancariaInteresGeneras = cuentaBancariaInteresGeneras;
	}

	@XmlTransient
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "cuentaBancaria")
	public Set<Beneficiario> getBeneficiarios() {
		return this.beneficiarios;
	}

	public void setBeneficiarios(Set beneficiarios) {
		this.beneficiarios = beneficiarios;
	}

	@XmlTransient
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "cuentaBancaria")
	public Set<TransaccionBancaria> getTransaccionBancarias() {
		return this.transaccionBancarias;
	}

	public void setTransaccionBancarias(Set transaccionBancarias) {
		this.transaccionBancarias = transaccionBancarias;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((numeroCuenta == null) ? 0 : numeroCuenta.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (!(obj instanceof CuentaBancaria))
			return false;
		CuentaBancaria other = (CuentaBancaria) obj;
		if (numeroCuenta == null) {
			if (other.numeroCuenta != null)
				return false;
		} else if (!numeroCuenta.equals(other.numeroCuenta))
			return false;
		return true;
	}

}
