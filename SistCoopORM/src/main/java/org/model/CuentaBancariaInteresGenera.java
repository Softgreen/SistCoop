package org.model;

// Generated 02-may-2014 11:48:28 by Hibernate Tools 4.0.0

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.DecimalMin;
import javax.validation.constraints.Digits;
import javax.validation.constraints.NotNull;

import org.hibernate.annotations.NaturalId;

/**
 * CuentaBancariaInteresGenera generated by hbm2java
 */
@Entity
@Table(name = "CUENTA_BANCARIA_INTERES_GENERA", schema = "BDSISTEMAFINANCIERO", uniqueConstraints = { @UniqueConstraint(columnNames = { "ID_CUENTA_BANCARIA", "FECHA" }) })
@NamedQueries({ @NamedQuery(name = CuentaBancariaInteresGenera.findByIdAndDate, query = "SELECT c FROM CuentaBancariaInteresGenera c WHERE c.cuentaBancaria.idCuentaBancaria = :idCuentaBancaria AND c.fecha BETWEEN :desde AND :hasta") })
public class CuentaBancariaInteresGenera implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public final static String findByIdAndDate = "CuentaBancariaInteresGenera.findByIdAndDate";

	private BigInteger idCuentaBancariaInteresGen;
	private CuentaBancaria cuentaBancaria;
	private BigDecimal capital;
	private BigDecimal interesGenerado;
	private Date fecha;

	public CuentaBancariaInteresGenera() {
	}

	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Id
	@Column(name = "ID_CUENTA_BANCARIA_INTERES_GEN", unique = true, nullable = false)
	public BigInteger getIdCuentaBancariaInteresGen() {
		return this.idCuentaBancariaInteresGen;
	}

	public void setIdCuentaBancariaInteresGen(BigInteger idCuentaBancariaInteresGen) {
		this.idCuentaBancariaInteresGen = idCuentaBancariaInteresGen;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@NaturalId
	@JoinColumn(name = "ID_CUENTA_BANCARIA", foreignKey = @ForeignKey)
	public CuentaBancaria getCuentaBancaria() {
		return this.cuentaBancaria;
	}

	public void setCuentaBancaria(CuentaBancaria cuentaBancaria) {
		this.cuentaBancaria = cuentaBancaria;
	}

	@NotNull
	@DecimalMin(value = "0")
	@Digits(integer = 18, fraction = 2)
	@Column(name = "CAPITAL", nullable = false)
	public BigDecimal getCapital() {
		return this.capital;
	}

	public void setCapital(BigDecimal capital) {
		this.capital = capital;
	}

	@NotNull
	@DecimalMin(value = "0")
	@Digits(integer = 18, fraction = 2)
	@Column(name = "INTERES_GENERADO", nullable = false)
	public BigDecimal getInteresGenerado() {
		return this.interesGenerado;
	}

	public void setInteresGenerado(BigDecimal interesGenerado) {
		this.interesGenerado = interesGenerado;
	}

	@NotNull
	@NaturalId
	@Temporal(TemporalType.DATE)
	@Column(name = "FECHA")
	public Date getFecha() {
		return this.fecha;
	}

	public void setFecha(Date fecha) {
		this.fecha = fecha;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((cuentaBancaria == null) ? 0 : cuentaBancaria.hashCode());
		result = prime * result + ((fecha == null) ? 0 : fecha.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (!(obj instanceof CuentaBancariaInteresGenera))
			return false;
		CuentaBancariaInteresGenera other = (CuentaBancariaInteresGenera) obj;
		if (cuentaBancaria == null) {
			if (other.cuentaBancaria != null)
				return false;
		} else if (!cuentaBancaria.equals(other.cuentaBancaria))
			return false;
		if (fecha == null) {
			if (other.fecha != null)
				return false;
		} else if (!fecha.equals(other.fecha))
			return false;
		return true;
	}

}
